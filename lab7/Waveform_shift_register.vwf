/*<simulation_settings>
<ftestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off lab7 -c lab7 --vector_source="/home/ec2016/ra172358/mc613/lab7/Waveform_shift_register.vwf" --testbench_file="/home/ec2016/ra172358/mc613/lab7/simulation/qsim/Waveform_shift_register.vwf.vht"</ftestbench_cmd>
<ttestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off lab7 -c lab7 --vector_source="/home/ec2016/ra172358/mc613/lab7/Waveform_shift_register.vwf" --testbench_file="/home/ec2016/ra172358/mc613/lab7/simulation/qsim/Waveform_shift_register.vwf.vht"</ttestbench_cmd>
<fnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=on --flatten_buses=off --tool=modelsim_oem --format=vhdl --output_directory="/home/ec2016/ra172358/mc613/lab7/simulation/qsim/" lab7 -c lab7</fnetlist_cmd>
<tnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=off --flatten_buses=off --timescale=1ps --tool=modelsim_oem --format=vhdl --output_directory="/home/ec2016/ra172358/mc613/lab7/simulation/qsim/" lab7 -c lab7</tnetlist_cmd>
<modelsim_script>onerror {exit -code 1}
vlib work
vcom -work work lab7.vho
vcom -work work Waveform_shift_register.vwf.vht
vsim -novopt -c -t 1ps -L cyclonev -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.shift_register_vhd_vec_tst
vcd file -direction lab7.msim.vcd
vcd add -internal shift_register_vhd_vec_tst/*
vcd add -internal shift_register_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f
</modelsim_script>
<modelsim_script_timing>onerror {exit -code 1}
vlib work
vcom -work work lab7.vho
vcom -work work Waveform_shift_register.vwf.vht
vsim -novopt -c -t 1ps -sdfmax shift_register_vhd_vec_tst/i1=lab7_vhd.sdo -L cyclonev -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.shift_register_vhd_vec_tst
vcd file -direction lab7.msim.vcd
vcd add -internal shift_register_vhd_vec_tst/*
vcd add -internal shift_register_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f
</modelsim_script_timing>
<hdl_lang>vhdl</hdl_lang>
</simulation_settings>*/
/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2017  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel FPGA IP License Agreement, or other applicable license
agreement, including, without limitation, that your use is for
the sole purpose of programming logic devices manufactured by
Intel and sold by Intel or its authorized distributors.  Please
refer to the applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 50.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("mode")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("mode[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "mode";
}

SIGNAL("mode[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "mode";
}

SIGNAL("par_in")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("par_in[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "par_in";
}

SIGNAL("par_in[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "par_in";
}

SIGNAL("par_in[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "par_in";
}

SIGNAL("par_in[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "par_in";
}

SIGNAL("par_in[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "par_in";
}

SIGNAL("par_in[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "par_in";
}

SIGNAL("par_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("par_out[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "par_out";
}

SIGNAL("par_out[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "par_out";
}

SIGNAL("par_out[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "par_out";
}

SIGNAL("par_out[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "par_out";
}

SIGNAL("par_out[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "par_out";
}

SIGNAL("par_out[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "par_out";
}

SIGNAL("ser_in")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.784;
		LEVEL 1 FOR 7.696;
		LEVEL 0 FOR 87.024;
		LEVEL 1 FOR 4.143;
		LEVEL 0 FOR 94.128;
		LEVEL 1 FOR 12.433;
		LEVEL 0 FOR 82.88;
		LEVEL 1 FOR 11.248;
		LEVEL 0 FOR 84.655;
		LEVEL 1 FOR 16.577;
		LEVEL 0 FOR 25.456;
		LEVEL 1 FOR 24.864;
		LEVEL 0 FOR 23.68;
		LEVEL 1 FOR 22.496;
		LEVEL 0 FOR 14.208;
		LEVEL 1 FOR 24.272;
		LEVEL 0 FOR 21.904;
		LEVEL 1 FOR 24.864;
		LEVEL 0 FOR 11.248;
		LEVEL 1 FOR 24.272;
		LEVEL 0 FOR 10.656;
		LEVEL 1 FOR 34.336;
		LEVEL 0 FOR 5.328;
		LEVEL 1 FOR 13.024;
		LEVEL 0 FOR 4.736;
		LEVEL 1 FOR 13.616;
		LEVEL 0 FOR 11.84;
		LEVEL 1 FOR 11.248;
		LEVEL 0 FOR 34.927;
		LEVEL 1 FOR 21.905;
		LEVEL 0 FOR 189.552;
	}
}

TRANSITION_LIST("mode[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 149.552;
		LEVEL 1 FOR 50.32;
		LEVEL 0 FOR 62.752;
		LEVEL 1 FOR 21.904;
		LEVEL 0 FOR 18.352;
		LEVEL 1 FOR 23.088;
		LEVEL 0 FOR 26.64;
		LEVEL 1 FOR 19.536;
		LEVEL 0 FOR 11.248;
		LEVEL 1 FOR 27.824;
		LEVEL 0 FOR 221.407;
		LEVEL 1 FOR 68.673;
		LEVEL 0 FOR 148.704;
	}
}

TRANSITION_LIST("mode[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 49.552;
		LEVEL 1 FOR 50.32;
		LEVEL 0 FOR 233.248;
		LEVEL 1 FOR 181.743;
		LEVEL 0 FOR 17.76;
		LEVEL 1 FOR 68.673;
		LEVEL 0 FOR 148.704;
	}
}

TRANSITION_LIST("par_in[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 301.328;
		LEVEL 1 FOR 31.968;
		LEVEL 0 FOR 666.704;
	}
}

TRANSITION_LIST("par_in[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 251.328;
		LEVEL 1 FOR 31.968;
		LEVEL 0 FOR 666.704;
	}
}

TRANSITION_LIST("par_in[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 251.328;
		LEVEL 1 FOR 31.968;
		LEVEL 0 FOR 66.304;
		LEVEL 1 FOR 50.32;
		LEVEL 0 FOR 550.08;
	}
}

TRANSITION_LIST("par_in[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 251.328;
		LEVEL 1 FOR 31.968;
		LEVEL 0 FOR 66.304;
		LEVEL 1 FOR 50.32;
		LEVEL 0 FOR 550.08;
	}
}

TRANSITION_LIST("par_in[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 950.0;
	}
}

TRANSITION_LIST("par_in[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 950.0;
	}
}

TRANSITION_LIST("par_out[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("par_out[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("par_out[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("par_out[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("par_out[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("par_out[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("ser_in")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 117.807;
		LEVEL 1 FOR 22.497;
		LEVEL 0 FOR 81.104;
		LEVEL 1 FOR 20.127;
		LEVEL 0 FOR 332.705;
		LEVEL 1 FOR 425.76;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "mode";
	EXPAND_STATUS = EXPANDED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3;
}

DISPLAY_LINE
{
	CHANNEL = "mode[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "mode[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "par_in";
	EXPAND_STATUS = EXPANDED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
	CHILDREN = 5, 6, 7, 8, 9, 10;
}

DISPLAY_LINE
{
	CHANNEL = "par_in[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "par_in[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "par_in[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "par_in[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "par_in[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "par_in[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "par_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
	CHILDREN = 12, 13, 14, 15, 16, 17;
}

DISPLAY_LINE
{
	CHANNEL = "par_out[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "par_out[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "par_out[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "par_out[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "par_out[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "par_out[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "ser_in";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
